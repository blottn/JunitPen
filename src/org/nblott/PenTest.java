package org.nblott;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class PenTest {

	public int field = 20;
	
	@Before
	public void timeToMessWithThreads() {
		Thread current = Thread.currentThread();
		ClassLoader loader = current.getContextClassLoader();
		loader.getResource("org.nblott.PenTest.field");
	}
	
	
	@Test
	public void toFindLocalVars() {
		int localVar = 20;
		
		Field[] fields = this.getClass().getFields();
		
		for(Field f : fields) {
			System.out.println(f.toString());
		}
		
		
		boolean found = findVar();
		
		System.out.println(found);
		
	}
	
	public boolean findVar() {
		try {
			this.getClass().getField("localVar");
			
			return true;
		} catch (NoSuchFieldException | SecurityException e) {
			// TODO Auto-generated catch block
			return false;
		}
		
	}
	
	
	//@Test
	public void testPrivateAccess() throws IllegalArgumentException, IllegalAccessException {
		Class<?> penClazz = Data.class;
		Data data = new Data();
		
		int findableVar;
		
		try {
			Field f = penClazz.getDeclaredField("privField");
			System.out.println(f.toString());
			
			
			f.setAccessible(true);
			f.set(data, 20);
			f.setAccessible(false);
			data.printPrivateThing();
			
			Field f2 = penClazz.getDeclaredField("pubField");
			
			System.out.println(f2.toString());
			
			f2.setAccessible(false);
			
			System.out.println(data.pubField);
			
		} catch (NoSuchFieldException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			Method m = org.junit.runner.JUnitCore.class.getDeclaredMethod("main", String[].class);
			System.out.println(m.toString());
			
		} catch (NoSuchMethodException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
