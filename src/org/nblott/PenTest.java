package org.nblott;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class PenTest {

	/*
	 * 
	 * Discovered that it isn't really possible to break the junit testing from reflection because you can't access non-static variables with
	 */
	
	
	
	
	public class ExpectedException extends Throwable {
		
		String flag = "Hello world";
		
		public ExpectedException() {}
	}
	
	public int field = 20;
	
	@Before
	public void timeToMessWithThreads() {
		Thread current = Thread.currentThread();
		
		Thread JunitRunner = new Thread();
		
	}

	
	@Test
	public void whatIsATest() {
		Method[] methods = this.getClass().getMethods();
		for (Method m : methods) {
			for (Annotation a : m.getAnnotations()) {
				if (a.toString().substring(0,15).equals("@org.junit.Test")) {
					Class<? extends Annotation> t = a.annotationType();
					for (Method method : t.getMethods()) {
						
						System.out.println(method.toString());
						
						//System.out.println(f.toString());
					}
				
				}
			}
		}
	}
	
	
	@Test
	public void failedTest() {
		Assert.assertFalse(false);
	}
	
	//@Test
	public void testPrivateAccess() throws IllegalArgumentException, IllegalAccessException {
		Class<?> penClazz = Data.class;
		Data data = new Data();
		
		int findableVar;
		
		try {
			Field f = penClazz.getDeclaredField("privField");
			System.out.println(f.toString());
			
			
			f.setAccessible(true);
			f.set(data, 20);
			f.setAccessible(false);
			data.printPrivateThing();
			
			Field f2 = penClazz.getDeclaredField("pubField");
			
			System.out.println(f2.toString());
			
			f2.setAccessible(false);
			
			System.out.println(data.pubField);
			
		} catch (NoSuchFieldException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			Method m = org.junit.runner.JUnitCore.class.getDeclaredMethod("main", String[].class);
			System.out.println(m.toString());
			
		} catch (NoSuchMethodException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
