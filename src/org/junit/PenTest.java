package org.junit;

import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class PenTest {

	@Test
	public void penetrate(/* AYYYY >)'-')> */) {
		Class<?> clazz = org.junit.runner.JUnitCore.class;
	
		Field[] fields = clazz.getFields();
		
		for (Field f : fields) {
			System.out.println(f.getClass().toString());
		}
		
	}
	
	@Test
	public void testPrivateAccess() throws IllegalArgumentException, IllegalAccessException {
		Class<?> penClazz = Pen.class;
		Pen pen = new Pen();
		
		try {
			Field f = penClazz.getDeclaredField("privField");
			System.out.println(f.toString());
			
			
			f.setAccessible(true);
			f.set(pen, 20);
			f.setAccessible(false);
			pen.printPrivateThing();
			
		} catch (NoSuchFieldException | SecurityException e) {
			// TODO Auto-generated catch block
			
			
			e.printStackTrace();
		}
		
		try {
			Method m = penClazz.getDeclaredMethod("privFunc", String.class);
			System.out.println(m.toString());
			
		} catch (NoSuchMethodException | SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
}
